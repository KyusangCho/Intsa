@page "/Materials/PurchaseRequisition/YarnUpdated"
@page "/Materials/PurchaseRequisition/YarnUpdated/Index"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns

@inject IJSRuntime JSRuntime 

<h1 class="page-header mb-3">
    Purchase Requisition (Yarn)
    <small>원사요청서 관리</small>
</h1>


<SfGrid ID="Grid" @ref="DefaultGrid" DataSource="@YarnPurchases" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Height="100%" Width="100%"
        Toolbar="Toolbaritems" AllowExcelExport="true" ContextMenuItems="ContextMenuitems">
    <GridEvents OnActionBegin="OnActionBegin" OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" TValue="YarnPurchase"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" Dialog="DialogParams"></GridEditSettings>
    <GridPageSettings PageSize="22"></GridPageSettings>
    <GridFilterSettings>
        <GridFilterColumns>
            <GridFilterColumn Field="TeamID" MatchCase="false" Operator="Syncfusion.Blazor.Operator.StartsWith" Predicate="and" Value="@val"></GridFilterColumn>
        </GridFilterColumns>
    </GridFilterSettings>
    <GridColumns>
        <GridColumn Field=@nameof(YarnPurchase.ID) IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.TeamID) EditType="EditType.DropDownEdit" EditorSettings="@TeamIDEditParams" Width="150"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.RegDate) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="130"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.CreatedBy) TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.Buyer) TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.Requestno) TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.PurposeOf) TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.DeliveryDate) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="130"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.SupplierDate) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="130"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.ShipTo) TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(YarnPurchase.Action) TextAlign="TextAlign.Left" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="400px" Visible="false" ShowCloseIcon="true" IsModal="true">
    <DialogEvents Closed="Closed"></DialogEvents>
    <DialogTemplates>
        @*Here you can customize the Header and Content of delete confirmation dialog*@
        <Header> Delete Record</Header>
        <Content> You are about to Delete a Record @SelectedData ?</Content>
    </DialogTemplates>
    <DialogAnimationSettings Effect="@AnimationEffect" Duration=400 />
    <DialogButtons>
        <DialogButton OnClick="@OkClick">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@CancelClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>

<style>
    .e-btn.e-flat.e-primary, .e-btn.e-flat.e-primary:focus {
        background-color: #317ab9;
        border-color: #265f91;
        color: #fff;
    }

        .e-btn.e-flat.e-primary:hover, .e-btn.e-flat.e-primary:active {
            background-color: #21527d;
            border-color: #163854;
            color: #fff;
        }

    .close-icon {
        width: 24px;
        height: 24px;
        position: relative;
        display: inline-block;
    }

    .error-msg {
        color: #66afe9;
        display: inline-block;
        position: relative;
        top: -20px;
        left: 10px;
    }

    .error-detail {
        position: relative;
        left: 56px;
        margin: 0 0 21px;
    }

    .e-icons.close-icon.col-lg-2:before {
        content: '\e7e9';
        font-size: 26px;
        color: #d9534f;
        position: relative;
        left: 1px;
        bottom: 18px;
    }

    .e-dialog .e-footer-content {
        background-color: #f8f8f8;
        
    }

    .e-dialog.e-control.e-popup, .e-dialog.e-control.e-popup .e-dlg-header-content {
        background-color: #d9edf7;
    }

    .e-dialog.e-control.e-popup {
        padding: 3px;
    }

    .e-dialog.e-control .e-dlg-header-content {
        padding: 10px;
    }

    .e-dialog.e-control .e-footer-content {
        padding: 8px 12px;
    }

    .e-dialog.e-control .e-dlg-content {
        padding: 15px 0 0;
        padding-left: 5px; 
    }

    .msg-wrapper.col-lg-12 {
        margin-top: 20px;
    }
    .e-click::before {
        content: '\e525';
    }
    .e-download::before {
        content: '\e603';
    }
    .e-upload::before {
        content: '\e60f';
    }

</style>

@code {

    private SfGrid<YarnPurchase> DefaultGrid;
    private SfDialog Dialog;
    private DialogEffect AnimationEffect = DialogEffect.Zoom;
    private DialogSettings DialogParams = new DialogSettings { Width = "500px", Height="80%" }; 

    public object SelectedData;
    public bool flag = true;
    public void Closed()
    {
        flag = true;
    }

    public void OnActionBegin(ActionEventArgs<YarnPurchase> Args)
    {
        if (Args.RequestType.ToString() == "Delete" && flag)
        {
            Args.Cancel = true;  //cancel default delete action
            Dialog.Show();
            flag = false;
        }
        else if (Args.RequestType.ToString() == "Excel Export")
        {
            this.DefaultGrid.ExcelExport();
        }
    }
    public void RowSelectHandler(RowSelectEventArgs<YarnPurchase> Args)
    {
        SelectedData = Args.Data.ID;
    }
    private void OkClick()
    {
        DefaultGrid.DeleteRecord();   //delete the record programatically while clikcing OK button
        Dialog.Hide();
    }
    private void CancelClick()
    {
        Dialog.Hide();
    }

    public List<YarnPurchase> YarnPurchases { get; set; }
    public string val = "";

    private List<Object> Toolbaritems = new List<Object>() {  "Add", "Edit", "Delete", "Update", "Cancel", "ExcelExport", "Search",
        new ItemModel() { Text="Template Download", TooltipText = "Template Download", PrefixIcon = "e-download", Id="TemplateDownload" },
        new ItemModel() { Text="Upload Excel", TooltipText = "Upload Excel", PrefixIcon = "e-upload", Id="UploadExcel" }
    };

    private List<Object> ContextMenuitems = new List<Object> { "FirstPage", "PrevPage", "LastPage", "NextPage" };

    protected override void OnInitialized()
    {
        YarnPurchases = Enumerable.Range(1, 75).Select(x => new YarnPurchase()
        {
            ID = 1000 + x,
            TeamID = (new string[] { "Team1A", "Team1B", "Team2A", "Team2B", "Team3A", "Team3B", "Administration" })[new Random().Next(5)],
            Buyer = (new string[] { "BELUGA INC", "EXPRESS", "JCREW", "MATERNITY OPCO", "KOHL'S", "TORRID", "MAURICES", "LUCKY OPCO" })[new Random().Next(5)],
            RegDate = DateTime.Now.AddDays(-x),
            DeliveryDate = DateTime.Now.AddDays(-x),
            SupplierDate = DateTime.Now.AddDays(-x),
            Action = x.ToString(),
        }).ToList();
    }

    public IEditorSettings TeamIDEditParams = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>() { DataSource = LocalDataTeam, AllowFiltering = true }
    };


    public class YarnPurchase
    {
        [Key]
        [Required(ErrorMessage = "ID should not be empty")]
        [Display(Name = "ID")]
        public int? ID { get; set; }
        [Display(Name = "Team Name")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string TeamID { get; set; }
        [Display(Name = "Created By")]
        public string CreatedBy { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Created")]
        [Editable(false)]
        public DateTime? RegDate { get; set; }
        [Display(Name = "Buyer")]
        public string Buyer { get; set; }
        [Display(Name = "Request#")]
        public string Requestno { get; set; }
        [Display(Name = "Purpose of")]
        public string PurposeOf { get; set; }

        [DataType(DataType.Date)]
        [Display(Name = "Delivery")]
        public DateTime? DeliveryDate { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Supplier")]
        public DateTime? SupplierDate { get; set; }

        [Display(Name = "ShipTo")]
        public string ShipTo { get; set; }
        [Display(Name = "Action")]
        public string Action { get; set; }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            await this.DefaultGrid.ExcelExport();
        }
        else if (args.Item.Id == "TemplateDownload")
        {
            await JSRuntime.InvokeAsync<object>("open", "https://s3.amazonaws.com/int.boards/WebTemplate_Material_Purchase_Requisition.xlsx", "_blank");
        }
        else if (args.Item.Id == "Transfer")
        {
            //You can customized your code here....
        }
    }

    public static List<YarnPurchase> LocalDataTeam = new List<YarnPurchase> {
            new YarnPurchase() { TeamID= "Team1A" },
            new YarnPurchase() { TeamID= "Team1B" },
            new YarnPurchase() { TeamID= "Team2A" },
            new YarnPurchase() { TeamID= "Team2B" },
            new YarnPurchase() { TeamID= "Team3A" },
            new YarnPurchase() { TeamID= "Team3B" },
            new YarnPurchase() { TeamID= "Administration" }
    };

    public static List<YarnPurchase> LocalDataBuyer = new List<YarnPurchase> {
            new YarnPurchase() { Buyer= "BELUGA INC" },
            new YarnPurchase() { Buyer= "EXPRESS" },
            new YarnPurchase() { Buyer= "JCREW" },
            new YarnPurchase() { Buyer= "MATERNITY OPCO" },
            new YarnPurchase() { Buyer= "KOHL'S" },
            new YarnPurchase() { Buyer= "TORRID" },
            new YarnPurchase() { Buyer= "MAURICES" },
            new YarnPurchase() { Buyer= "LUCKY OPCO" }
    };
}
