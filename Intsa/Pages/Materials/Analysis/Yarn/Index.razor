@page "/Materials/Analysis/Yarn"
@page "/Materials/Analysis/Yarn/Index"

@using Syncfusion.Blazor.Diagrams
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using DiagramShapes = Syncfusion.Blazor.Diagrams.Shapes

<h1 class="page-header mb-3">
    Current Yarn flows
    <small>원사 이동 현황</small>
</h1>

<SfDropDownList TValue="string" TItem="Yarn" Placeholder="Select a Yarn" DataSource="@LocalData">
    <DropDownListFieldSettings Value="ID" Text="Text"></DropDownListFieldSettings>
</SfDropDownList>


<div class="col-lg-9 control-section" style="width: 100%; background: white; border-right: 1px solid #D7D7D7;">
    <div id="diagram-space" class="content-wrapper" style="width:100%;background: white;">
        <SfDiagram @ref="@Diagram" Height="650px" Width="100%"
                   Nodes="@NodeCollection"
                   NodeDefaults="@NodeDefaults"
                   Connectors="@ConnectorCollection"
                   ConnectorDefaults="@ConnectorDefaults"
                   SelectedItems="@SelectedItems">
            <DiagramEvents SelectionChanged="@SelectionChange"></DiagramEvents>
            <DiagramSnapSettings Constraints="@SnapConstraints.None"></DiagramSnapSettings>
            <DiagramPageSettings>
                <DiagramFitOptions CanFit="true" Mode="FitModes.Width"></DiagramFitOptions>
            </DiagramPageSettings>
        </SfDiagram>
    </div>
</div>
@code
{
    private string CheckValue = "All shapes";
    SfCheckBox<bool> Checkboxcontrol;
    private string Value1 = "All shapes";
    private string Value2 = "Selected Shapes";
    bool checkboxvalue = false;
    const string defaultCssClass = "image-pattern-style";
    const string selectedCssClass = "image-pattern-style e-selected-style";
    int connectorCount;
    string selectedType = "Bezier";
    // Reference to diagram
    SfDiagram Diagram;
    public Dictionary<string, string> CssClass { get; set; }
    // Defines diagram's nodes collection
    public ObservableCollection<DiagramNode> NodeCollection { get; set; }
    // Defines diagram's connector collection
    public ObservableCollection<DiagramConnector> ConnectorCollection { get; set; }
    // Defines default values for DiagramNode object
    public DiagramNode NodeDefaults { get; set; }
    // Defines default values for DiagramConnector object
    public DiagramConnector ConnectorDefaults { get; set; }
    public DiagramSelectedItems SelectedItems;
    ObservableCollection<DiagramNodeAnnotation> defaultAnnotationcollection = new ObservableCollection<DiagramNodeAnnotation>();
    protected override void OnInitialized()
    {
        SelectedItems = new DiagramSelectedItems();
        SelectedItems.Constraints = (SelectorConstraints.ConnectorSourceThumb | SelectorConstraints.ConnectorTargetThumb);
        this.InitDiagramDefaults();
        var port1 = CreatePort("port1", 1, .25);
        var port2 = CreatePort("port2", 1, .5);
        var port3 = CreatePort("port3", 1, .75);
        var ports1 = new ObservableCollection<DiagramPort>() { port1, port2, port3 };
        var port4 = CreatePort("port4", 0, 0.46);
        var port5 = CreatePort("port5", 0, 0.5);
        var port6 = CreatePort("port6", 0, 0.54);
        var ports6 = new ObservableCollection<DiagramPort>() { port4, port5, port6 };
        var portIn = CreatePort("portIn", 0, 0.5);
        var portOut = CreatePort("portOut", 1, 0.5);
        var ports3 = new ObservableCollection<DiagramPort>() { portIn, portOut };
        var ports4 = new ObservableCollection<DiagramPort>() { portIn, portOut };
        var ports5 = new ObservableCollection<DiagramPort>() { portIn, portOut };
        var ports2 = new ObservableCollection<DiagramPort>() { portIn, portOut };

        NodeCollection = new ObservableCollection<DiagramNode>();
        CreateNode("node1", 0, 200, "Tennat");
        CreateNode("node2", 200, 200, "INT, S.A.", ports1);
        CreateNode("node3", 400, 50, "Knitopia\n11574 Kgs", ports2);
        CreateNode("node4", 400, 200, "J.W. Textiles", ports3);
        CreateNode("node5", 400, 350, "Milagro Guatemala", ports4);
        CreateNode("node6", 600, 200, "Textiles Gran Fe", ports4);
        CreateNode("node7", 800, 50, "Apparel Links", ports4);
        CreateNode("node8", 800, 200, "INT Planta", ports4);
        CreateNode("node9", 800, 350, "J.S.International", ports4);
        CreateNode("node10", 200, 500, "J.S.Warehouse", ports4);

        ConnectorCollection = new ObservableCollection<DiagramConnector>();
        CreateConnector("connector1", "node1", "node2", null, null);
        CreateConnector("connector2","node2", "node3", "port1", "portIn");
        CreateConnector("connector3","node2", "node4", "port2", "portIn");
        CreateConnector("connector4","node2", "node5", "port3", "portIn");
        CreateConnector("connector8", "node4", "node5", "port3", "portIn");
        CreateConnector("connector9", "node3", "node6", "port3", "portIn");

        CreateConnector("connector9", "node6", "node7", "port1", "portIn");
        CreateConnector("connector9", "node6", "node8", "port2", "portIn");
        CreateConnector("connector9", "node6", "node9", "port3", "portIn");

        CreateConnector("connector8", "node6", "node10", "port5", "portIn");
    }
    private void SelectionChange(IBlazorSelectionChangeEventArgs arg)
    {
        if (arg.State == EventState.Changed)
        {
            DiagramConnector connector = null;
            if (arg.NewValue.Connectors != null && arg.NewValue.Connectors.Count > 0)
            {
                connector = Diagram.GetConnector(arg.NewValue.Connectors[0].Id);
            }
            if (connector != null)
                if (connector.Constraints == (connector.Constraints | ConnectorConstraints.Default & ~(ConnectorConstraints.ReadOnly)))
                {
                    checkboxvalue = false;
                    StateHasChanged();
                }
                else
                {
                    checkboxvalue = true;
                    StateHasChanged();
                }
            {
                if (connector != null)
                {
                    if (connector.Style.StrokeDashArray != "5,5" && connector.SourceDecorator.Shape == DecoratorShapes.None)
                    {
                        if (connector.Type == Segments.Straight && connector.Style.StrokeWidth == 1)
                        {
                            updateSelection("Straight");
                        }
                        else if (connector.Type == Segments.Orthogonal && connector.CornerRadius == 5)
                        {
                            updateSelection("CornerRadious");
                        }
                        else if (connector.Type == Segments.Orthogonal && connector.SourceDecorator.Shape == DecoratorShapes.Circle && connector.Style.StrokeDashArray == "5,5")
                        {
                            updateSelection("SourceDecoratorWithDashArray");
                        }
                        else if (connector.Type == Segments.Orthogonal && connector.SourceDecorator.Shape == DecoratorShapes.Circle)
                        {
                            updateSelection("SourceDecorator");
                        }
                        else if (connector.Type == Segments.Orthogonal && connector.Style.StrokeWidth == 1)
                        {
                            updateSelection("Orthogonal");
                        }
                        else if (connector.Type == Segments.Bezier && connector.Style.StrokeWidth == 1)
                        {
                            updateSelection("Bezier");
                        }
                        else if (connector.Type == Segments.Straight && connector.Style.StrokeWidth == 2)
                        {
                            updateSelection("StraightWithStroke");
                        }
                        else if (connector.Type == Segments.Orthogonal && connector.Style.StrokeWidth == 2)
                        {
                            updateSelection("OrthogonalWithStroke");
                        }
                        else if (connector.Type == Segments.Bezier && connector.Style.StrokeWidth == 2)
                        {
                            updateSelection("BezierWithStroke");
                        }
                    }
                    if (connector.Style.StrokeDashArray == "5,5" && connector.SourceDecorator.Shape == DecoratorShapes.None)
                    {
                        if (connector.Type == Segments.Straight)
                        {
                            updateSelection("StraightWithDashArray");
                        }
                        else if (connector.Type == Segments.Orthogonal)
                        {
                            updateSelection("OrthogonalWithDashArray");
                        }
                        else if (connector.Type == Segments.Bezier)
                        {
                            updateSelection("BezierWithDashArray");
                        }
                    }
                    if (connector.SourceDecorator.Shape == DecoratorShapes.Circle)
                    {
                        if (connector.Style.StrokeDashArray == "5,5")
                        {
                            updateSelection("SourceDecoratorWithDashArray");
                        }
                        else
                        {
                            updateSelection("SourceDecorator");
                        }
                    }
                }
            }
        }
    }
    private void updateSelection(string id)
    {
        for (int i = 0; i < CssClass.Count; i++)
        {
            var value = CssClass.Values.ElementAt(i);
            var key = CssClass.Keys.ElementAt(i);
            if (CssClass.ContainsKey(id) && key == id)
            {
                value = selectedCssClass;
            }
            else
            {
                value = defaultCssClass;
            }
            CssClass.Remove(key);
            CssClass.Add(key, value);
        }
        StateHasChanged();
    }
    public void ChangeConnectorAppearance(string typeSelected)
    {
        switch (typeSelected)
        {
            case "Straight":
                ApplyStyple(Segments.Straight, 1);
                break;
            case "Orthogonal":
                ApplyStyple(Segments.Orthogonal, 1);
                break;
            case "Bezier":
                ApplyStyple(Segments.Bezier, 1);
                break;
            case "StraightWithStroke":
                ApplyStyple(Segments.Straight, 2);
                break;
            case "OrthogonalWithStroke":
                ApplyStyple(Segments.Orthogonal, 2);
                break;
            case "BezierWithStroke":
                ApplyStyple(Segments.Bezier, 2);
                break;
            case "StraightWithDashArray":
                ApplyStyple(Segments.Straight, 2, true);
                break;
            case "OrthogonalWithDashArray":
                ApplyStyple(Segments.Orthogonal, 2, true);
                break;
            case "BezierWithDashArray":
                ApplyStyple(Segments.Bezier, 2, true);
                break;
            case "CornerRadious":
                ApplyStyple(Segments.Orthogonal, 2, false, false, true);
                break;
            case "SourceDecorator":
                ApplyStyple(Segments.Straight, 2, false, true);
                break;
            case "SourceDecoratorWithDashArray":
                ApplyStyple(Segments.Straight, 2, true, true);
                break;
        }
        CssClass[selectedType] = defaultCssClass;
        selectedType = typeSelected;
        CssClass[selectedType] = selectedCssClass;
    }
    private void UpdateConnectorStyle(DiagramConnector connector, Segments type, int strokeWidth, bool isDashedLine = false, bool hasSourceDecorator = false, bool isRounded = false)
    {
        if (hasSourceDecorator)
        {
            connector.SourceDecorator = new ConnectorSourceDecorator()
            {
                Shape = DecoratorShapes.Circle,
                Style = new DecoratorShapeStyle()
                {
                    StrokeColor = "#6f409f",
                    Fill = "#6f409f",
                    StrokeWidth = strokeWidth
                }
            };
        }
        else
        {
            connector.SourceDecorator.Shape = DecoratorShapes.None;
        }
        connector.Type = type;
        connector.Style.StrokeWidth = strokeWidth;
        connector.CornerRadius = isRounded ? 5 : 0;
        connector.Style.StrokeDashArray = isDashedLine ? "5,5" : "";
        connector.TargetDecorator.Style.StrokeWidth = strokeWidth;
    }
    private void ApplyStyple(Segments type, int strokeWidth, bool isDashedLine = false, bool hasSourceDecorator = false, bool isRounded = false)
    {
        Diagram.BeginUpdate();
        if (CheckValue == "All shapes")
        {
            foreach (DiagramConnector connector in Diagram.Connectors)
            {
                this.UpdateConnectorStyle(connector, type, strokeWidth, isDashedLine, hasSourceDecorator, isRounded);
            }
        }
        if (CheckValue == "Selected Shapes" && Diagram.SelectedItems.Connectors.Count > 0)
        {
            for (var i = 0; i < Diagram.SelectedItems.Connectors.Count; i++)
            {
                this.UpdateConnectorStyle(Diagram.GetConnector(Diagram.SelectedItems.Connectors[i].Id), type, strokeWidth, isDashedLine, hasSourceDecorator, isRounded);
            }
        };
        Diagram.EndUpdate();
    }
    private void UpdateConstraintsValue(DiagramConnector connector, Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (args.Checked)
        {
            connector.Constraints = (connector.Constraints & ~(ConnectorConstraints.DragSourceEnd
                | ConnectorConstraints.DragTargetEnd | ConnectorConstraints.DragSegmentThumb)) | ConnectorConstraints.ReadOnly;
        }
        else
        {
            connector.Constraints |= ConnectorConstraints.Default & ~(ConnectorConstraints.ReadOnly);
        }
    }
    public void ConstraintsChange(Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        checkboxvalue = args.Checked;
        Diagram.BeginUpdate();
        if (Diagram.Connectors.Count > 0)
        {
            if (CheckValue == "All shapes")
            {
                for (int i = 0; i < Diagram.Connectors.Count; i++)
                {
                    this.UpdateConstraintsValue(Diagram.Connectors[i], args);
                }
            }
            if (CheckValue == "Selected Shapes" && Diagram.SelectedItems.Connectors.Count > 0)
            {
                for (var i = 0; i < Diagram.SelectedItems.Connectors.Count; i++)
                {
                    this.UpdateConstraintsValue(Diagram.GetConnector(Diagram.SelectedItems.Connectors[i].Id), args);
                }
            };
            Diagram.EndUpdate();
        }
    }
    private void InitDiagramDefaults()
    {
        DiagramNodeAnnotation defaultAnnotation = new DiagramNodeAnnotation()
        {
            Style = new AnnotationStyle()
            {
                Color = "white",
                Fill = "transparent"
            }
        };
        NodeDefaults = new DiagramNode()
        {
            Width = 80,
            Height = 35,
            Style = new NodeShapeStyle() { StrokeColor = "#6F409F", StrokeWidth = 2 }
        };
        ConnectorDefaults = new DiagramConnector()
        {
            TargetDecorator = new ConnectorTargetDecorator()
            {
                Shape = DecoratorShapes.Arrow,
                Style = new DecoratorShapeStyle() { Fill = "#6f409f", StrokeColor = "#6f409f", StrokeWidth = 2 }
            },
            Style = new ConnectorShapeStyle() { StrokeColor = "#6f409f", StrokeWidth = 1 },
            Type = Segments.Bezier,
        };
    }
    private DiagramPort CreatePort(string id, double x, double y)
    {
        return new DiagramPort()
        {
            Id = id,
            Offset = new NodePortOffset() { X = x, Y = y },
            Visibility = PortVisibility.Hidden
        };
    }
    private void CreateNode(string id, double x, double y, string label, object ports = null)
    {
        DiagramNodeAnnotation annotation = new DiagramNodeAnnotation() { Content = label };
        DiagramNode diagramNode = new DiagramNode()
        {
            Id = id,
            OffsetX = x,
            OffsetY = y,
            Shape = new DiagramShape() { Type = DiagramShapes.Basic, BasicShape = BasicShapes.Rectangle, CornerRadius = 10 },
            Annotations = new ObservableCollection<DiagramNodeAnnotation>() { annotation }
        };
        if (ports != null)
        {
            diagramNode.Ports = ports as ObservableCollection<DiagramPort>;
        }
        NodeCollection.Add(diagramNode);
    }
    public DiagramConstraints DiagramConstraints = DiagramConstraints.Bridging;
    private void CreateConnector(string id, string sourceId, string targetId, string sourcePort, string targetPort)
    {
        DiagramConnector diagramConnector = new DiagramConnector()
        {
            Id = string.Format("connector{0}", ++connectorCount),
            SourceID = sourceId,
            TargetID = targetId,
            SourcePortID = sourcePort,
            TargetPortID = targetPort,
            Type = Segments.Bezier
        };
        @*UpdateConnectorStyle(diagramConnector, Segments.Bezier, 1, false, false, false);*@ 

if ((id == "connector1") || (id == "connector3") || (id == "connector4") || (id == "connector8"))
{
    ObservableCollection<DiagramConnectorAnnotation> annotationcollection = new ObservableCollection<DiagramConnectorAnnotation>();
    DiagramConnectorAnnotation annotation = new DiagramConnectorAnnotation() { Style = new AnnotationStyle() { Fill = "white" } };
    if ((id == "connector1"))
    {
        annotation.Content = "PO\n8547Kgs";
    }
    else if ((id == "connector8"))
    {
        annotation.Content = "Move";
    }
    annotationcollection.Add(annotation);
    diagramConnector.Annotations = annotationcollection;
};
        @*if (id == "connector6" || id == "connector7")
        {
            diagramConnector.Type = Segments.Orthogonal;
            DiagramConnectorSegment segment = new DiagramConnectorSegment() { Type = Segments.Orthogonal, Length = id == "connector7" ? 10 : 150, Direction = Direction.Left };
            diagramConnector.Segments = new ObservableCollection<DiagramConnectorSegment>() { segment };
        }*@
    ConnectorCollection.Add(diagramConnector);
}
protected override async Task OnAfterRenderAsync(bool firstRender)
{
    if (firstRender)
    {
        await Task.Delay(500);
        StateHasChanged();
    }
}



public class Yarn
{
    public string ID { get; set; }
    public string Text { get; set; }
}
List<Yarn> LocalData = new List<Yarn> {
new Yarn() { ID= "Yarn1", Text= "1" },
new Yarn() { ID= "Yarn2", Text= "2" },
new Yarn() { ID= "Yarn3", Text= "3" },
new Yarn() { ID= "Yarn4", Text= "4" },
new Yarn() { ID= "Yarn5", Text= "5" },
new Yarn() { ID= "Yarn6", Text= "6" },
new Yarn() { ID= "Yarn7", Text= "7" },
new Yarn() { ID= "Yarn8", Text= "8"},
new Yarn() { ID= "Yarn9", Text= "9" },
new Yarn() { ID= "Yarn10", Text= "10"},
  };

}