@page "/Production/Hourly"
@page "/Production/Hourly/Index"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns

@inject IJSRuntime JSRuntime

<h1 class="page-header mb-3">
    Production Hourly 
    <small>시간별/라인별 생산현황</small>
</h1>


<SfGrid ID="Grid" @ref="DefaultGrid" DataSource="@Productions" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Height="100%" Width="100%"
        Toolbar="Toolbaritems" AllowExcelExport="true" ContextMenuItems="ContextMenuitems">
    <GridEvents OnActionBegin="OnActionBegin" OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" TValue="Production"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog" Dialog="DialogParams"></GridEditSettings>
    <GridPageSettings PageSize="22"></GridPageSettings>
    <GridFilterSettings>
        <GridFilterColumns>
            <GridFilterColumn Field="LineID" MatchCase="false" Operator="Syncfusion.Blazor.Operator.StartsWith" Predicate="and" Value="@val"></GridFilterColumn>
        </GridFilterColumns>
    </GridFilterSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Production.Fecha) AutoFit="true" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="100"></GridColumn>
        <GridColumn Field=@nameof(Production.LineID) EditType="EditType.DropDownEdit" EditorSettings="@LineIDEditParams" Width="100"></GridColumn>
        <GridColumn Field=@nameof(Production.Mno) AutoFit="true" TextAlign="TextAlign.Left" Width="70"></GridColumn>
        <GridColumn Field=@nameof(Production.Buyer) AutoFit="true" TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Production.DiasTrabaja) TextAlign="TextAlign.Left" Width="70"></GridColumn>
        <GridColumn Field=@nameof(Production.Precio) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Total) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Meta) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora01) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora02) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora03) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora04) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora05) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora06) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora07) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora08) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora09) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora10) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Hora11) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.HoraTTL) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Perdidas) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Rates) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Operator) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.Ayudante) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.PplTotal) AutoFit="true" TextAlign="TextAlign.Right" Width="80"></GridColumn>
        <GridColumn Field=@nameof(Production.ID) IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="120" Visible="false"></GridColumn>
        <GridColumn Field=@nameof(Production.RegDate) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="130" Visible="false"></GridColumn>
        <GridColumn Field=@nameof(Production.CreatedBy) TextAlign="TextAlign.Left" Width="120" Visible="false"></GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="400px" Visible="false" ShowCloseIcon="true" IsModal="true">
    <DialogEvents Closed="Closed"></DialogEvents>
    <DialogTemplates>
        @*Here you can customize the Header and Content of delete confirmation dialog*@
        <Header> Delete Record</Header>
        <Content> You are about to Delete a Record @SelectedData ?</Content>
    </DialogTemplates>
    <DialogAnimationSettings Effect="@AnimationEffect" Duration=400 />
    <DialogButtons>
        <DialogButton OnClick="@OkClick">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@CancelClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>

<style>
    .e-btn.e-flat.e-primary, .e-btn.e-flat.e-primary:focus {
        background-color: #317ab9;
        border-color: #265f91;
        color: #fff;
    }

    .e-btn.e-flat.e-primary:hover, .e-btn.e-flat.e-primary:active {
        background-color: #21527d;
        border-color: #163854;
        color: #fff;
    }

    .close-icon {
        width: 24px;
        height: 24px;
        position: relative;
        display: inline-block;
    }

    .error-msg {
        color: #66afe9;
        display: inline-block;
        position: relative;
        top: -20px;
        left: 10px;
    }

    .error-detail {
        position: relative;
        left: 56px;
        margin: 0 0 21px;
    }

    .e-icons.close-icon.col-lg-2:before {
        content: '\e7e9';
        font-size: 26px;
        color: #d9534f;
        position: relative;
        left: 1px;
        bottom: 18px;
    }

    .e-dialog .e-footer-content {
        background-color: #f8f8f8;
    }

    .e-dialog.e-control.e-popup, .e-dialog.e-control.e-popup .e-dlg-header-content {
        background-color: #d9edf7;
    }

    .e-dialog.e-control.e-popup {
        padding: 3px;
    }

    .e-dialog.e-control .e-dlg-header-content {
        padding: 10px;
    }

    .e-dialog.e-control .e-footer-content {
        padding: 8px 12px;
    }

    .e-dialog.e-control .e-dlg-content {
        padding: 15px 0 0;
        padding-left: 5px;
    }

    .msg-wrapper.col-lg-12 {
        margin-top: 20px;
    }

    .e-click::before {
        content: '\e525';
    }

    .e-download::before {
        content: '\e603';
    }

    .e-upload::before {
        content: '\e60f';
    }
</style>

@code {

    private SfGrid<Production> DefaultGrid;
    private SfDialog Dialog;
    private DialogEffect AnimationEffect = DialogEffect.Zoom;
    private DialogSettings DialogParams = new DialogSettings { Width = "500px", Height = "80%" };

    public object SelectedData;
    public bool flag = true;
    public void Closed()
    {
        flag = true;
    }

    public void OnActionBegin(ActionEventArgs<Production> Args)
    {
        if (Args.RequestType.ToString() == "Delete" && flag)
        {
            Args.Cancel = true;  //cancel default delete action
            Dialog.Show();
            flag = false;
        }
        else if (Args.RequestType.ToString() == "Excel Export")
        {
            this.DefaultGrid.ExcelExport();
        }
    }
    public void RowSelectHandler(RowSelectEventArgs<Production> Args)
    {
        SelectedData = Args.Data.ID;
    }
    private void OkClick()
    {
        DefaultGrid.DeleteRecord();   //delete the record programatically while clikcing OK button
        Dialog.Hide();
    }
    private void CancelClick()
    {
        Dialog.Hide();
    }

    public List<Production> Productions { get; set; }
    public string val = "";

    private List<Object> Toolbaritems = new List<Object>() {  "Add", "Edit", "Delete", "ExcelExport", "Search",
        @*new ItemModel() { Text="Template Download", TooltipText = "Template Download", PrefixIcon = "e-download", Id="TemplateDownload" },
        new ItemModel() { Text="Upload Excel", TooltipText = "Upload Excel", PrefixIcon = "e-upload", Id="UploadExcel" }*@
    };

    private List<Object> ContextMenuitems = new List<Object> { "FirstPage", "PrevPage", "LastPage", "NextPage" };

    protected override void OnInitialized()
    {
        Productions = Enumerable.Range(1, 75).Select(x => new Production()
        {
            ID = 1000 + x,
            LineID = (new string[] { "Linea 1", "Linea 2", "Linea 3", "Linea 4", "Linea 5", "Linea 6", "Linea 7", "Linea 8", "Linea 9", "Linea10" })[new Random().Next(10)],
            Buyer = (new string[] { "BELUGA INC", "EXPRESS", "JCREW", "MATERNITY OPCO", "KOHL'S", "TORRID", "MAURICES", "LUCKY OPCO" })[new Random().Next(5)],
            RegDate = DateTime.Now.AddDays(-x),
            Fecha = DateTime.Now.AddDays(-x),
            Hora01 = new Random().Next(1000),
            Hora02 = new Random().Next(1000),
            Hora03 = new Random().Next(1000),
            Hora04 = new Random().Next(1000),
            Hora05 = new Random().Next(1000),
            Hora06 = new Random().Next(1000),
            Hora07 = new Random().Next(1000),
            Hora08 = new Random().Next(1000),
            Hora09 = new Random().Next(1000),
            Hora10 = new Random().Next(1000),
            Hora11 = new Random().Next(1000),
        }).ToList();
    }

    public IEditorSettings LineIDEditParams = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>() { DataSource = LocalDataLine, AllowFiltering = true }
    };


    public class Production
    {
        [Key]
        [Required(ErrorMessage = "ID should not be empty")]
        [Display(Name = "ID")]
        public int? ID { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Fecha")]
        public DateTime? Fecha { get; set; }
        [Display(Name = "Linea")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string LineID { get; set; }
        [Display(Name = "M#")]
        public string Mno { get; set; }
        [Display(Name = "Cliente")]
        public string Buyer { get; set; }
        [Display(Name = "Dias Tra.")]
        public int DiasTrabaja { get; set; }
        [DataType(DataType.Currency)]
        [Display(Name = "Precio")]
        public decimal Precio { get; set; }
        [DataType(DataType.Currency)]
        [Display(Name = "Total")]
        public decimal? Total { get; set; }

        [Display(Name = "Meta")]
        public int Meta { get; set; }
        [Display(Name = "8:00")]
        public int Hora01 { get; set; }
        [Display(Name = "9:00")]
        public int Hora02 { get; set; }
        [Display(Name = "10:00")]
        public int Hora03 { get; set; }
        [Display(Name = "11:00")]
        public int Hora04 { get; set; }
        [Display(Name = "12:00")]
        public int Hora05 { get; set; }
        [Display(Name = "2:00")]
        public int Hora06 { get; set; }
        [Display(Name = "3:00")]
        public int Hora07 { get; set; }
        [Display(Name = "4:00")]
        public int Hora08 { get; set; }
        [Display(Name = "5:00")]
        public int Hora09 { get; set; }
        [Display(Name = "6:00")]
        public int Hora10 { get; set; }
        [Display(Name = "7:00")]
        public int Hora11 { get; set; }
        [Display(Name = "TTL")]
        public int HoraTTL { get; set; }
        [Display(Name = "Perdidas")]
        public int Perdidas { get; set; }
        [Display(Name = "%")]
        public double Rates { get; set; }
        [Display(Name = "Ope.")]
        public int Operator { get; set; }
        [Display(Name = "Ayu.")]
        public int Ayudante { get; set; }
        [Display(Name = "Persona TTL")]
        public int PplTotal { get; set; }

        [Display(Name = "Created By")]
        public string CreatedBy { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Created")]
        [Editable(false)]
        public DateTime? RegDate { get; set; }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            await this.DefaultGrid.ExcelExport();
        }
        else if (args.Item.Id == "TemplateDownload")
        {
            await JSRuntime.InvokeAsync<object>("open", "https://s3.amazonaws.com/int.boards/WebTemplate_Material_Purchase_Requisition.xlsx", "_blank");
        }
        else if (args.Item.Id == "Transfer")
        {
            //You can customized your code here....
        }
    }

    public static List<Production> LocalDataLine = new List<Production> {
            new Production() { LineID= "Linea 1" },
            new Production() { LineID= "Linea 2" },
            new Production() { LineID= "Linea 3" },
            new Production() { LineID= "Linea 4" },
            new Production() { LineID= "Linea 5" },
            new Production() { LineID= "Linea 6" },
            new Production() { LineID= "Linea 7" },
            new Production() { LineID= "Linea 8" },
            new Production() { LineID= "Linea 9" },
            new Production() { LineID= "Linea 10" },
    };

    public static List<Production> LocalDataBuyer = new List<Production> {
            new Production() { Buyer= "BELUGA INC" },
            new Production() { Buyer= "EXPRESS" },
            new Production() { Buyer= "JCREW" },
            new Production() { Buyer= "MATERNITY OPCO" },
            new Production() { Buyer= "KOHL'S" },
            new Production() { Buyer= "TORRID" },
            new Production() { Buyer= "MAURICES" },
            new Production() { Buyer= "LUCKY OPCO" }
    };
}
