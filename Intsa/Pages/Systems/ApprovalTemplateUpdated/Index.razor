@page "/Systems/ApprovalTemplates"
@page "/Systems/ApprovalTemplates/Index"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns

<h1 class="page-header mb-3">
    Approval Templates
    <small>전자결재 템플릿 관리</small>
</h1>


<SfGrid ID="Grid" @ref="DefaultGrid" DataSource="@Approvals" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Height="100%" Width="100%"
        Toolbar="Toolbaritems" AllowExcelExport="true" ContextMenuItems="ContextMenuitems">
    <GridEvents OnActionBegin="OnActionBegin" OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" TValue="Approval"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
    <GridPageSettings PageSize="22"></GridPageSettings>
    <GridFilterSettings>
        <GridFilterColumns>
            <GridFilterColumn Field="ClassID" MatchCase="false" Operator="Syncfusion.Blazor.Operator.StartsWith" Predicate="and" Value="@val"></GridFilterColumn>
        </GridFilterColumns>
    </GridFilterSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Approval.ID) IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Approval.ClassID) TextAlign="TextAlign.Left" EditType="EditType.DropDownEdit" EditorSettings="@ClassIDEditParams" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Approval.Center) TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Approval.DeptID) TextAlign="TextAlign.Left" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Approval.TeamID) EditType="EditType.DropDownEdit" EditorSettings="@TeamIDEditParams" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Approval.Approvers) TextAlign="TextAlign.Left" Width="200"></GridColumn>
        <GridColumn Field=@nameof(Approval.Created) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="250px" Visible="false" ShowCloseIcon="true" IsModal="true">
    <DialogEvents Closed="Closed"></DialogEvents>
    <DialogTemplates>
        <Header> Delete Record</Header>
        <Content> You are about to Delete a Record @SelectedData ?</Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="@OkClick">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@CancelClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>

<SfDialog @ref="DialogAdd" Width="800px" Visible="false" ShowCloseIcon="true" IsModal="true">
    <DialogEvents Closed="ClosedAdd"></DialogEvents>
    <DialogTemplates>
        <Header> Add Approvers</Header>
        <Content>
            <div class="row">
                <div class="col-12">
                    <SfGrid ID="Grid2" @ref="DefaultGrid2" DataSource="@Approvers" 
                            AllowPaging="false" AllowSorting="true" AllowFiltering="false" Height="100%" Width="100%"
                            Toolbar="ToolbarApproveritems" AllowExcelExport="true" AllowRowDragAndDrop="true">
                        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
                        <GridColumns>
                            <GridColumn Field=@nameof(Approver.ID) IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="120" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(Approver.Name) TextAlign="TextAlign.Left" Width="200"></GridColumn>
                            <GridColumn Field=@nameof(Approver.TeamID) EditType="EditType.DropDownEdit" EditorSettings="@TeamIDEditParams" Width="150"></GridColumn>
                            <GridColumn Field=@nameof(Approver.DeptID) TextAlign="TextAlign.Left" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(Approver.Center) TextAlign="TextAlign.Left" Width="120"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="@OkAddClick">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@CancelAddClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>

<style>
    .e-click::before {
        content: '\e525';
    }
</style>

@code {

    private SfGrid<Approval> DefaultGrid;
    private SfGrid<Approver> DefaultGrid2;
    private SfDialog Dialog;
    private SfDialog DialogAdd;
    public object SelectedData;
    public bool flag = true;
    public bool flagAdd = true;

    public void OnActionBegin(ActionEventArgs<Approval> Args)
    {
        if (Args.RequestType.ToString() == "Add" && flagAdd)
        {
            Args.Cancel = true;  //cancel default delete action
            DialogAdd.Show();
            flagAdd = false;
        }
        else if (Args.RequestType.ToString() == "Delete" && flag)
        {
            Args.Cancel = true;  //cancel default delete action
            Dialog.Show();
            flag = false;
        }
        else if (Args.RequestType.ToString() == "Excel Export")
        {
            this.DefaultGrid.ExcelExport();
        }
    }
    public void RowSelectHandler(RowSelectEventArgs<Approval> Args)
    {
        SelectedData = Args.Data.ID;
    }

    public void Closed()
    {
        flag = true;
    }
    private void OkClick()
    {
        DefaultGrid.DeleteRecord();   //delete the record programatically while clikcing OK button
        Dialog.Hide();
    }
    private void CancelClick()
    {
        Dialog.Hide();
    }

    public void ClosedAdd()
    {
        flagAdd = true;
    }
    private void OkAddClick()
    {
        @*DefaultGrid.DeleteRecord();   //delete the record programatically while clikcing OK button*@
    DialogAdd.Hide();
}
private void CancelAddClick()
{
    DialogAdd.Hide();
}

public List<Approval> Approvals { get; set; }
public List<Approver> Approvers { get; set; }
public string val = "";
private List<Object> Toolbaritems = new List<Object>() { "Add", "Edit", "Delete", "ExcelExport", "Search", };
private List<Object> ToolbarApproveritems = new List<Object>() { "Add", "Delete", };

private List<Object> ContextMenuitems = new List<Object> { "FirstPage", "PrevPage", "LastPage", "NextPage" };

protected override void OnInitialized()
{
    Approvals = Enumerable.Range(1, 15).Select(x => new Approval()
    {
        ID = 1000 + x,
        TeamID = (new string[] { "Team1A", "Team1B", "Team2A", "Team2B", "Team3A", "Team3B", "Administration" })[new Random().Next(5)],
        ClassID = (new string[] { "Dashboard", "System", "Code", "Order", "Cost", "Yarn", "Payment", "Factory", })[new Random().Next(8)],
        Created = DateTime.Now.AddDays(-x),
    }).ToList();

    Approvers = Enumerable.Range(1, 7).Select(x => new Approver()
    {
        ID = 1000 + x,
        TeamID = (new string[] { "Team1A", "Team1B", "Team2A", "Team2B", "Team3A", "Team3B", "Administration" })[new Random().Next(5)],
        Name = "INT" + x,
        Created = DateTime.Now.AddDays(-x),
        Activate = 1, 
    }).ToList();
}


public static List<Approval> LocalDataClass = new List<Approval> {
            new Approval() { ClassID= "Dashboard" },
            new Approval() { ClassID= "System" },
            new Approval() { ClassID= "Code" },
            new Approval() { ClassID= "Order" },
            new Approval() { ClassID= "Cost" },
            new Approval() { ClassID= "Yarn" },
            new Approval() { ClassID= "Payment" },
            new Approval() { ClassID= "Factory" },
    };

public IEditorSettings TeamIDEditParams = new DropDownEditCellParams
{
    Params = new DropDownListModel<object, object>() { DataSource = LocalDataTeam, AllowFiltering = true }
};
public IEditorSettings ClassIDEditParams = new DropDownEditCellParams
{
    Params = new DropDownListModel<object, object>() { DataSource = LocalDataClass, AllowFiltering = true }
};


public class Approval
{
    [Key]
    [Required(ErrorMessage = "ID should not be empty")]
    [Display(Name = "ID")]
    public int? ID { get; set; }
    [Display(Name = "Process")]
    [Required(ErrorMessage = "Field should not be empty")]
    public string ClassID { get; set; }
    [Display(Name = "Center")]
    [Required(ErrorMessage = "Field should not be empty")]
    public string Center { get; set; }
    [Display(Name = "Department")]
    [Required(ErrorMessage = "Field should not be empty")]
    public string DeptID { get; set; }
    [Display(Name = "Team")]
    [Required(ErrorMessage = "Field should not be empty")]
    public string TeamID { get; set; }

    [Display(Name = "Approvers")]
    public string Approvers { get; set; }
    [Display(Name = "Remark")]
    public string Remark { get; set; }

    [DataType(DataType.Date)]
    [Display(Name = "Created Date")]
    [Editable(false)]
    public DateTime? Created { get; set; }
    [Display(Name = "Activate")]
    public int? Activate { get; set; }

}


public class Approver
{
    [Key]
    [Required(ErrorMessage = "ID should not be empty")]
    [Display(Name = "ID")]
    public int? ID { get; set; }
    [Display(Name = "Center")]
    [Required(ErrorMessage = "Field should not be empty")]
    public string Center { get; set; }
    [Display(Name = "Department")]
    [Required(ErrorMessage = "Field should not be empty")]
    public string DeptID { get; set; }
    [Display(Name = "Team")]
    [Required(ErrorMessage = "Field should not be empty")]
    public string TeamID { get; set; }
    [Display(Name = "Name")]
    public string Name { get; set; }

    [DataType(DataType.Date)]
    [Display(Name = "Created")]
    [Editable(false)]
    public DateTime? Created { get; set; }
    [Display(Name = "Activate")]
    public int? Activate { get; set; }
}

public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
{
    if (args.Item.Id == "Grid_excelexport")
    {
        await this.DefaultGrid.ExcelExport();
    }
    else if (args.Item.Id == "Transfer")
    {
        //You can customized your code here....

    }
}

public static List<Approval> LocalDataTeam = new List<Approval> {
            new Approval() { TeamID= "Team1A" },
            new Approval() { TeamID= "Team1B" },
            new Approval() { TeamID= "Team2A" },
            new Approval() { TeamID= "Team2B" },
            new Approval() { TeamID= "Team3A" },
            new Approval() { TeamID= "Team3B" },
            new Approval() { TeamID= "Administration" },
    };

}
