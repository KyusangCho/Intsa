@page "/Systems/Team"
@page "/Systems/Team/Index"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns

<h1 class="page-header mb-3">
    Team
    <small>부서별 팀 관리</small>
</h1>


<SfGrid ID="Grid" @ref="DefaultGrid" DataSource="@Teams" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Height="100%" Width="100%"
        Toolbar="Toolbaritems" AllowExcelExport="true" ContextMenuItems="ContextMenuitems">
    <GridEvents OnActionBegin="OnActionBegin" OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" TValue="Team"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
    <GridPageSettings PageSize="22"></GridPageSettings>
    <GridFilterSettings>
        <GridFilterColumns>
            <GridFilterColumn Field="DeptID" MatchCase="false" Operator="Syncfusion.Blazor.Operator.StartsWith" Predicate="and" Value="@val"></GridFilterColumn>
        </GridFilterColumns>
    </GridFilterSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Team.TeamID) IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Team.DeptID) EditType="EditType.DropDownEdit" EditorSettings="@DeptIDEditParams" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Team.RegDate) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
        <GridColumn Field=@nameof(Team.Class) TextAlign="TextAlign.Right" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="250px" Visible="false" ShowCloseIcon="true" IsModal="true">
    <DialogEvents Closed="Closed"></DialogEvents>
    <DialogTemplates>
        @*Here you can customize the Header and Content of delete confirmation dialog*@
        <Header> Delete Record</Header>
        <Content> You are about to Delete a Record @SelectedData ?</Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="@OkClick">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@CancelClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>

<style>
    .e-click::before {
        content: '\e525';
    }
</style>

@code {

    private SfGrid<Team> DefaultGrid;
    private SfDialog Dialog;
    public object SelectedData;
    public bool flag = true;
    public void Closed()
    {
        flag = true;
    }

    public void OnActionBegin(ActionEventArgs<Team> Args)
    {
        if (Args.RequestType.ToString() == "Delete" && flag)
        {
            Args.Cancel = true;  //cancel default delete action
            Dialog.Show();
            flag = false;
        }
        else if (Args.RequestType.ToString() == "Excel Export")
        {
            this.DefaultGrid.ExcelExport();
        }
    }
    public void RowSelectHandler(RowSelectEventArgs<Team> Args)
    {
        SelectedData = Args.Data.TeamID;
    }
    private void OkClick()
    {
        DefaultGrid.DeleteRecord();   //delete the record programatically while clikcing OK button
        Dialog.Hide();
    }
    private void CancelClick()
    {
        Dialog.Hide();
    }

    public List<Team> Teams { get; set; }
    public string val = "";
    private List<Object> Toolbaritems = new List<Object>() {  "Add", "Edit", "Delete", "Update", "Cancel", "ExcelExport", "Search",
        new ItemModel() { Text="Transfer", TooltipText = "Transfer", PrefixIcon = "e-click", Id="Transfer" } };

    private List<Object> ContextMenuitems = new List<Object> { "FirstPage", "PrevPage", "LastPage", "NextPage" };

    protected override void OnInitialized()
    {
        Teams = Enumerable.Range(1, 75).Select(x => new Team()
        {
            TeamID = 1000 + x,
            DeptID = (new string[] { "Sales1", "Sales2", "Sales3", "Administration", "Presidential", "QC", "Compliance" })[new Random().Next(5)],
            Class = x,
            RegDate = DateTime.Now.AddDays(-x),
        }).ToList();
    }

    public IEditorSettings DeptIDEditParams = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>() { DataSource = LocalDataDept, AllowFiltering = true }
    };


    public class Team
    {
        [Key]
        [Required(ErrorMessage = "TeamID should not be empty")]
        [Display(Name = "Team ID")]
        public int? TeamID { get; set; }
        [Display(Name = "Dept Name")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string DeptID { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Reg Date")]
        [Editable(false)]
        public DateTime? RegDate { get; set; }
        [Display(Name = "Class")]
        public double? Class { get; set; }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            await this.DefaultGrid.ExcelExport();
        }
        else if (args.Item.Id == "Transfer")
        {
            //You can customized your code here....

        }
    }

    public static List<Team> LocalDataDept = new List<Team> {
            new Team() { DeptID= "Sales1" },
            new Team() { DeptID= "Sales2" },
            new Team() { DeptID= "Sales3" },
            new Team() { DeptID= "Administration" },
            new Team() { DeptID= "Presidential" },
            new Team() { DeptID= "QC" },
            new Team() { DeptID= "Compliance" }
    };
}
