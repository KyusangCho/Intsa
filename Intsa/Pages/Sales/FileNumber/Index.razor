@page "/Sales/FileNumber"
@page "/Sales/FileNumber/Index"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns

<h1 class="page-header mb-3">
    File Number
    <small>영업 파일번호 관리</small>
</h1>


<SfGrid ID="Grid" @ref="DefaultGridM" DataSource="@FileNumbers" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Height="100%" Width="100%"
        Toolbar="Toolbaritems" AllowExcelExport="true" ContextMenuItems="ContextMenuitems">
    
    <GridTemplates>
        <DetailTemplate>
            @{
                var selectedID = (context as FileNumber);

                <SfGrid DataSource="@FileDetails" Query="@GetFileDetailQuery(selectedID)"
                        Toolbar="DetailToolbaritems" AllowExcelExport="true"
                        AllowPaging="true">
                    <GridPageSettings PageSize="8"></GridPageSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(FileDetail.ID) HeaderText="ID" Width="60"> </GridColumn>
                        <GridColumn Field=@nameof(FileDetail.Pono) HeaderText="PO#/Voucher#" Width="130"></GridColumn>
                        <GridColumn Field=@nameof(FileDetail.RegDate) HeaderText="Created" Format="d" Width="100"></GridColumn>
                        <GridColumn Field=@nameof(FileDetail.Status) HeaderText="Status" Width="90"></GridColumn>
                        <GridColumn HeaderText="" Width="400"></GridColumn>
                    </GridColumns>
                </SfGrid>
            }
        </DetailTemplate>
    </GridTemplates>
       
    
    
    <GridEvents OnActionBegin="OnActionBegin" OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" TValue="FileNumber"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
    <GridPageSettings PageSize="22"></GridPageSettings>
    <GridFilterSettings>
        <GridFilterColumns>
            <GridFilterColumn Field="TeamID" MatchCase="false" Operator="Syncfusion.Blazor.Operator.StartsWith" Predicate="and" Value="@val"></GridFilterColumn>
        </GridFilterColumns>
    </GridFilterSettings>
    <GridColumns>
        <GridColumn Field=@nameof(FileNumber.ID) IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(FileNumber.TeamID) EditType="EditType.DropDownEdit" EditorSettings="@TeamIDEditParams" Width="150"></GridColumn>
        <GridColumn Field=@nameof(FileNumber.Fileno) TextAlign="TextAlign.Left" Width="130"></GridColumn>
        <GridColumn Field=@nameof(FileNumber.Buyer) EditType="EditType.DropDownEdit" EditorSettings="@BuyerIDEditParams" Width="150"></GridColumn>
        <GridColumn Field=@nameof(FileNumber.Handler) TextAlign="TextAlign.Left" Width="130"></GridColumn>
        <GridColumn Field=@nameof(FileNumber.Remark) TextAlign="TextAlign.Left" Width="130"></GridColumn>
        <GridColumn Field=@nameof(FileNumber.Status) TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(FileNumber.RegDate) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
    </GridColumns>
</SfGrid>

<SfDialog @ref="Dialog" Width="250px" Visible="false" ShowCloseIcon="true" IsModal="true">
    <DialogEvents Closed="Closed"></DialogEvents>
    <DialogTemplates>
        @*Here you can customize the Header and Content of delete confirmation dialog*@
        <Header> Delete Record</Header>
        <Content> You are about to Delete a Record @SelectedData ?</Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="@OkClick">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@CancelClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>

<style>
    .e-click::before {
        content: '\e525';
    }
</style>

@code {

    private SfGrid<FileNumber> DefaultGridM;
    private SfGrid<FileDetail> DefaultGridD;
    private SfDialog Dialog;
    public object SelectedData;
    public bool flag = true;
    public void Closed()
    {
        flag = true;
    }

    public void OnActionBegin(ActionEventArgs<FileNumber> Args)
    {
        if (Args.RequestType.ToString() == "Delete" && flag)
        {
            Args.Cancel = true;  //cancel default delete action
            Dialog.Show();
            flag = false;
        }
        else if (Args.RequestType.ToString() == "Excel Export")
        {
            this.DefaultGridM.ExcelExport();
        }
    }
    public void RowSelectHandler(RowSelectEventArgs<FileNumber> Args)
    {
        SelectedData = Args.Data.ID;
    }
    private void OkClick()
    {
        DefaultGridM.DeleteRecord();   //delete the record programatically while clikcing OK button
        Dialog.Hide();
    }
    private void CancelClick()
    {
        Dialog.Hide();
    }

    public List<FileNumber> FileNumbers { get; set; }
    public List<FileDetail> FileDetails { get; set; }
    public string val = "";
    private List<Object> Toolbaritems = new List<Object>() {
        new ItemModel() { Text="New Card", TooltipText = "New Card", PrefixIcon = "e-click", Id="NewCard" },
        "Edit", "Delete", "ExcelExport", "Search",
    };
    private List<Object> DetailToolbaritems = new List<Object>() {  
        "ExcelExport", "Search",
    };



    private List<ContextMenuItemModel> ContextMenuitems = new List<ContextMenuItemModel> {
        new ContextMenuItemModel() { Text = "Order", Target=".e-content", Id = "Order" },
        new ContextMenuItemModel() { Text = "OrderCard", Target=".e-content", Id = "OrderCard" },
    };

    protected override void OnInitialized()
    {
        FileNumbers = Enumerable.Range(1, 75).Select(x => new FileNumber()
        {
            ID = 1000 + x,
            TeamID = (new string[] { "Team1A", "Team1B", "Team2A", "Team2B", "Team3A", "Team3B", "Administration" })[new Random().Next(5)],
            Fileno = "210" + x.ToString("0000"),
            Buyer = (new string[] { "BELUGA INC", "EXPRESS", "JCREW", "MATERNITY OPCO", "KOHL'S", "TORRID", "MAURICES", "LUCKY OPCO" })[new Random().Next(5)],
            Handler = "",
            Remark = "",
            RegDate = DateTime.Now.AddDays(-x),
        }).ToList();


        FileDetails = Enumerable.Range(1, 750).Select(x => new FileDetail()
        {
            ID = 1000 + x,
            PID = 1000 + (new Random().Next(75)),
            Pono = "T21050" + x.ToString("0000"),
            RegDate = DateTime.Now.AddDays(-x),
        }).ToList();
    }

    public static List<FileNumber> LocalDataTeam = new List<FileNumber> {
            new FileNumber() { TeamID= "Team1A" },
            new FileNumber() { TeamID= "Team1B" },
            new FileNumber() { TeamID= "Team2A" },
            new FileNumber() { TeamID= "Team2B" },
            new FileNumber() { TeamID= "Team3A" },
            new FileNumber() { TeamID= "Team3B" },
            new FileNumber() { TeamID= "Administration" }
    };

    public IEditorSettings TeamIDEditParams = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>() { DataSource = LocalDataTeam, AllowFiltering = true }
    };
    public IEditorSettings BuyerIDEditParams = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>() { DataSource = LocalDataBuyer, AllowFiltering = true }
    };

    public class FileNumber
    {
        [Key]
        [Required(ErrorMessage = "ID should not be empty")]
        [Display(Name = "ID")]
        public int? ID { get; set; }
        [Display(Name = "Team Name")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string TeamID { get; set; }
        [Display(Name = "File#")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string Fileno { get; set; }
        [Display(Name = "Buyer")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string Buyer { get; set; }
        [Display(Name = "Handler")]
        public string Handler { get; set; }
        [Display(Name = "Remark")]
        public string Remark { get; set; }


        [DataType(DataType.Date)]
        [Display(Name = "Reg Date")]
        [Editable(false)]
        public DateTime? RegDate { get; set; }
        [Display(Name = "Status")]
        public int? Status { get; set; }
    }

    public class FileDetail
    {
        [Key]
        [Required(ErrorMessage = "ID should not be empty")]
        [Display(Name = "ID")]
        public int? ID { get; set; }
        [Display(Name = "PID")]
        public int? PID { get; set; }
        [Display(Name = "PO#")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string Pono { get; set; }

        [DataType(DataType.Date)]
        [Display(Name = "Reg Date")]
        [Editable(false)]
        public DateTime? RegDate { get; set; }
        [Display(Name = "Status")]
        public int? Status { get; set; }
    }

    public Query GetFileMasterQuery(FileNumber value)
    {
        return new Query().Where("ID", "equal", value.ID);
    }
    public Query GetFileDetailQuery(FileNumber value)
    {
        return new Query().Where("PID", "equal", value.ID);
    }


    public class Team
    {
        public string TeamID { get; set; }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            await this.DefaultGridM.ExcelExport();
        }
        else if (args.Item.Id == "Transfer")
        {
            //You can customized your code here....

        }
    }

    public static List<FileNumber> LocalDataBuyer = new List<FileNumber> {
            new FileNumber() { Buyer= "BELUGA INC" },
            new FileNumber() { Buyer= "EXPRESS" },
            new FileNumber() { Buyer= "JCREW" },
            new FileNumber() { Buyer= "MATERNITY OPCO" },
            new FileNumber() { Buyer= "KOHL'S" },
            new FileNumber() { Buyer= "TORRID" },
            new FileNumber() { Buyer= "MAURICES" },
            new FileNumber() { Buyer= "LUCKY OPCO" }
    };
}
