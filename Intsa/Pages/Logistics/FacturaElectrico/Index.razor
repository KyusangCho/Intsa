@page "/Logistics/FacturaElectrico"
@page "/Logistics/FacturaElectrico/Index"

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Navigations
@using System.ComponentModel.DataAnnotations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs

<h1 class="page-header mb-3">
    Factura Electrico
    <small>SAT 전자영수증 생성관리</small>
</h1>

<div class="row">
    <div class="col-3">
        <SfGrid ID="GridFactura" @ref="DefaultGridFactura" DataSource="@Facturas" AllowPaging="true" AllowSorting="true" AllowFiltering="false"
                Height="600" Width="100%"
                Toolbar="Toolbaritems" AllowExcelExport="false">
            <GridEvents OnActionBegin="OnActionBegin" OnToolbarClick="ToolbarClickHandler" RowSelected="RowSelectHandler" TValue="Factura"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
            <GridPageSettings PageSize="22"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(Factura.ID) IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="70" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Factura.Facturano) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Factura.FechaFactura) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="130" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Factura.Handler) TextAlign="TextAlign.Left" Width="100" Visible="false"></GridColumn>
                <GridColumn Field=@nameof(Factura.Status) TextAlign="TextAlign.Center" Width="120" Visible="false"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
    <div class="col-9">
        <SfGrid ID="Grid" @ref="DefaultGridM" DataSource="@Exports" AllowPaging="true" AllowSorting="true" AllowFiltering="true"
                Height="600" Width="100%" FrozenColumns="2">
            <GridPageSettings PageSize="22"></GridPageSettings>
            <GridFilterSettings>
                <GridFilterColumns>
                    <GridFilterColumn Field="PaisDestino" MatchCase="false" Operator="Syncfusion.Blazor.Operator.StartsWith" Predicate="and" Value="@val"></GridFilterColumn>
                </GridFilterColumns>
            </GridFilterSettings>
            <GridColumns>
                <GridColumn Field=@nameof(Export.ID) IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="70" AutoFit="true" Visible="false"></GridColumn>
                <GridColumn Field=@nameof(Export.Facturano) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.FechaFactura) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="130" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.Serialno) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.Consignatario) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.Notificado) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.Aduana) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.PaisDestino) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.Cargador) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.FechaEmbarque) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="130" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.TipoCambio) Format="C5" TextAlign="TextAlign.Right" Width="90" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.Referencias) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.TipoDocumento) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.DuaSimplicada) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.Incoterm) TextAlign="TextAlign.Left" Width="100" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.Activate) TextAlign="TextAlign.Center" Width="120" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.FechaAnulada) Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="130" AutoFit="true"></GridColumn>
                <GridColumn Field=@nameof(Export.PrimaImportada) TextAlign="TextAlign.Center" Width="120" AutoFit="true"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

<SfDialog @ref="Dialog" Width="400px" Visible="false" ShowCloseIcon="true" IsModal="true">
    <DialogEvents Closed="Closed"></DialogEvents>
    <DialogTemplates>
        @*Here you can customize the Header and Content of delete confirmation dialog*@
        <Header> Generar texto</Header>
        <Content> ¿Está seguro de generar un archivo de texto para las facturas seleccionadas?</Content>
    </DialogTemplates>
    <DialogAnimationSettings Effect="@AnimationEffect" Duration=400 />
    <DialogButtons>
        <DialogButton OnClick="@OkClick">
            <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
        </DialogButton>
        <DialogButton OnClick="@CancelClick">
            <DialogButtonModel Content="Cancel"></DialogButtonModel>
        </DialogButton>
    </DialogButtons>
</SfDialog>

<style>
    .e-click::before {
        content: '\e525';
    }
</style>

@code    {

    private SfGrid<Export> DefaultGridM;
    private SfGrid<Factura> DefaultGridFactura;
    private SfDialog Dialog;
    private DialogEffect AnimationEffect = DialogEffect.Zoom;
    public object SelectedData;
    public bool flag = true;
    public void Closed()
    {
        flag = true;
    }
    public void OnActionBegin(ActionEventArgs<Factura> Args)
    {
        if (Args.RequestType.ToString() == "Delete" && flag)
        {
            Args.Cancel = true;  //cancel default delete action
            Dialog.Show();
            flag = false;
        }
        else if (Args.RequestType.ToString() == "Excel Export")
        {
            this.DefaultGridM.ExcelExport();
        }
    }
    public void RowSelectHandler(RowSelectEventArgs<Factura> Args)
    {
        SelectedData = Args.Data.ID;
    }
    private void OkClick()
    {
        DefaultGridM.DeleteRecord();   //delete the record programatically while clikcing OK button
        Dialog.Hide();
    }
    private void CancelClick()
    {
        Dialog.Hide();
    }


    public List<Export> Exports { get; set; }
    public List<Factura> Facturas { get; set; }

    public string val = "";
    private List<Object> Toolbaritems = new List<Object>() {
         new ItemModel() { Text = "Generar Texto", TooltipText ="Generar Texto", PrefixIcon="e-click", Id="GenerarTexto" },
         new ItemModel() { Text = "Confirm", TooltipText ="Confirm", PrefixIcon="e-click", Id="Confirm" },
         "Generar XML", "Eliminar Todos",
    };

    private List<Object> DetailToolbaritems = new List<Object>() { "Add", "Edit", "Delete",
        "ExcelExport", "Search",
    };


    protected override void OnInitialized()
    {
        Exports = Enumerable.Range(1, 75).Select(x => new Export()
        {
            ID = 1000 + x,
            Facturano = (6000 + x).ToString(),
            FechaFactura = DateTime.Now.AddDays(-x),
            FechaEmbarque = DateTime.Now.AddDays(x),
            TipoCambio = new Random().NextDouble() * 10f,
            RegDate = DateTime.Now.AddDays(-x),
        }).ToList();

        Facturas = Enumerable.Range(1, 75).Select(x => new Factura()
        {
            ID = 1000 + x,
            Facturano = (6000 + x).ToString(),
            FechaFactura = DateTime.Now.AddDays(-x),
            RegDate = DateTime.Now.AddDays(-x),
            Status = 1,
        }).ToList();
    }

    public class Export
    {
        [Key]
        [Required(ErrorMessage = "ID should not be empty")]
        [Display(Name = "ID")]
        public int? ID { get; set; }
        [Display(Name = "Factura#")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string Facturano { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Fecha Factura")]
        [Editable(true)]
        public DateTime? FechaFactura { get; set; }
        [Display(Name = "Serial#")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string Serialno { get; set; }
        [Display(Name = "Consignatario")]
        public string Consignatario { get; set; }

        [Display(Name = "Notificado")]
        public string Notificado { get; set; }
        [Display(Name = "Aduana")]
        public string Aduana { get; set; }
        [Display(Name = "Pais Destino")]
        public string PaisDestino { get; set; }
        [Display(Name = "Cargador")]
        public string Cargador { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Fecha Embarque")]
        [Editable(true)]
        public DateTime? FechaEmbarque { get; set; }
        [Display(Name = "Tipo Cambio")]
        [Required(ErrorMessage = "Field should not be empty")]
        public double TipoCambio { get; set; }

        [Display(Name = "Referencias")]
        public string Referencias { get; set; }
        [Display(Name = "TipoDocumento")]
        public string TipoDocumento { get; set; }
        [Display(Name = "DuaSimplicada")]
        public string DuaSimplicada { get; set; }
        [Display(Name = "Incoterm")]
        public string Incoterm { get; set; }
        [Display(Name = "Closed")]
        public int? Activate { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Fecha Anulada")]
        [Editable(false)]
        public DateTime? FechaAnulada { get; set; }
        [Display(Name = "Prima Imp.")]
        public int? PrimaImportada { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Reg Date")]
        [Editable(false)]
        public DateTime? RegDate { get; set; }
    }

    public class Factura
    {
        [Key]
        [Required(ErrorMessage = "ID should not be empty")]
        [Display(Name = "ID")]
        public int? ID { get; set; }
        [Display(Name = "Factura#")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string Facturano { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Fecha Factura")]
        [Editable(true)]
        public DateTime? FechaFactura { get; set; }
        [Display(Name = "Handler")]
        [Required(ErrorMessage = "Field should not be empty")]
        public string Handler { get; set; }
        [Display(Name = "Status")]
        public int? Status { get; set; }
        [DataType(DataType.Date)]
        [Display(Name = "Reg Date")]
        [Editable(false)]
        public DateTime? RegDate { get; set; }
    }


    public Query GetFileMasterQuery(Export value)
    {
        return new Query().Where("ID", "equal", value.ID);
    }
    public Query GetFileDetailQuery(Export value)
    {
        return new Query().Where("PID", "equal", value.ID);
    }

    public static List<Export> LocalDataOrigen = new List<Export> {
            new Export() { PaisDestino= "Team1A" },
            new Export() { PaisDestino= "Team1B" },
            new Export() { PaisDestino= "Team2A" },
            new Export() { PaisDestino= "Team2B" },
            new Export() { PaisDestino= "Team3A" },
            new Export() { PaisDestino= "Team3B" },
            new Export() { PaisDestino= "Administration" }
    };

    public IEditorSettings OrigenIDEditParams = new DropDownEditCellParams
    {
        Params = new DropDownListModel<object, object>() { DataSource = LocalDataOrigen, AllowFiltering = true }
    };

    public class Team
    {
        public string TeamID { get; set; }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")
        {
            await this.DefaultGridM.ExcelExport();
        }
        else if (args.Item.Id == "GenerarTexto")
        {
            args.Cancel = true;  //cancel default delete action
            Dialog.Show();
            flag = false;

        }
    }


}